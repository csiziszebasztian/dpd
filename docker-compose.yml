services:
  postgres:
    image: postgres:latest
    container_name: postgres-slq-dpd
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: var/lib/postgres/data
      POSTGRES_DB: dpd
    volumes:
      - postgres_data:/data/postgres
    ports:
      - 6543:5432
    networks:
      - dpd-network
    restart: unless-stopped

  spring-boot-app:
    image: dpd-spring-boot-app:latest
    build:
      context: ./backend
    container_name: dpd-app
    depends_on:
      - postgres
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - 8088:8088
    networks:
      - dpd-network
    restart: unless-stopped

  nextjs-app:
    container_name: dpd-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile # Explicitly specifying Dockerfile name
      args:
        - NEXT_PUBLIC_API_URL=http://spring-boot-app:8088/api/v1
    ports:
      - "3000:3000"
    networks:
      - dpd-network
    environment:
      # Pass the backend URL to the Next.js app
      # Use the service name 'spring-boot-app' for inter-container communication
      - NEXT_PUBLIC_API_URL=http://spring-boot-app:8088/api/v1
      # Ensure hot-reloading works correctly in development (if needed)
      # WATCHPACK_POLLING=true # Uncomment if hot-reload issues arise in Docker
    depends_on:
      - spring-boot-app # Ensure backend is ready before frontend starts (basic check)
    restart: unless-stopped
    # Add volumes for development if needed for hot-reloading node_modules/source code
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules # Prevent host node_modules from overwriting container's
    #   - /app/.next

networks:
  dpd-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
